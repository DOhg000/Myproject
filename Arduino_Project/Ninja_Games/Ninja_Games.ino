#include<Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C LCD(0x27, 16, 2);

int tonePin = 10; // пин зумера

int q = 15; // начальное положение припятствия 1
int b1 = 20; // начальное положение припятствия припятствие 2

const int personPosition = 3;  // установленная позиция персонажа

int rStrok1 = 0; //  положение припятствия 1 либо вверху либо внизу
int rStrok2 = 1; //  положение припятствия 2 либо вверху либо внизу


byte Ninja[] = {
  B10111,
  B01111,
  B00111,
  B00100,
  B01110,
  B10101,
  B01010,
  B10001
};

byte NinjaRevers[] = {
  B10001,
  B01010,
  B10101,
  B01110,
  B00100,
  B00111,
  B01111,
  B10111
};

byte Blocks[] = {
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111
};

byte thorn[] = {
  B11111,
  B11111,
  B10101,
  B01110,
  B01110,
  B10101,
  B11111,
  B11111
};



void setup() {
  pinMode(tonePin, OUTPUT); // подключение зумера(пьезо-динамик)
  pinMode (2, INPUT);  // подключаем кнопку;
  digitalWrite(2, LOW);    
  LCD.init();                        // инициализация LCD дисплея
  LCD.backlight();  

  LCD.createChar(0, Ninja);
  LCD.createChar(1, NinjaRevers);
  LCD.createChar(2, Blocks);
  LCD.createChar(3, thorn);
}

// музыка при наборе очков 200
void midi() {

    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 493, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 391, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 493, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 391, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 225.0);
    delay(250.0);
    tone(tonePin, 184, 75.0);
    delay(83.3333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 225.0);
    delay(250.0);
    tone(tonePin, 184, 75.0);
    delay(83.3333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 246, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 246, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 225.0);
    delay(250.0);
    tone(tonePin, 184, 75.0);
    delay(83.3333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 225.0);
    delay(250.0);
    tone(tonePin, 184, 75.0);
    delay(83.3333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 246, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 246, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 138, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 138, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 138, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 138, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 329, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 150.0);
    delay(166.666666667);
    tone(tonePin, 293, 150.0);
    delay(166.666666667);
    tone(tonePin, 493, 600.0);
    delay(666.666666667);
    tone(tonePin, 293, 150.0);
    delay(166.666666667);
    tone(tonePin, 277, 150.0);
    delay(166.666666667);
    tone(tonePin, 466, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 329, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 150.0);
    delay(166.666666667);
    tone(tonePin, 293, 150.0);
    delay(166.666666667);
    tone(tonePin, 493, 900.0);
    delay(1000.0);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 493, 150.0);
    delay(166.666666667);
    delay(166.666666667);
    tone(tonePin, 554, 600.0);
    delay(666.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 329, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 150.0);
    delay(166.666666667);
    tone(tonePin, 293, 150.0);
    delay(166.666666667);
    tone(tonePin, 493, 600.0);
    delay(666.666666667);
    tone(tonePin, 293, 150.0);
    delay(166.666666667);
    tone(tonePin, 277, 150.0);
    delay(166.666666667);
    tone(tonePin, 466, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 329, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 164, 300.0);
    delay(333.333333333);
    tone(tonePin, 369, 150.0);
    delay(166.666666667);
    tone(tonePin, 329, 150.0);
    delay(166.666666667);
    tone(tonePin, 293, 150.0);
    delay(166.666666667);
    tone(tonePin, 246, 150.0);
    delay(166.666666667);
    tone(tonePin, 329, 150.0);
    delay(166.666666667);
    tone(tonePin, 293, 150.0);
    delay(166.666666667);
    tone(tonePin, 246, 150.0);
    delay(166.666666667);
    tone(tonePin, 220, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 246, 150.0);
    delay(166.666666667);
    tone(tonePin, 220, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 146, 600.0);
    delay(666.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 184, 150.0);
    delay(166.666666667);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 110, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 97, 300.0);
    delay(333.333333333);
    tone(tonePin, 146, 150.0);
    delay(166.666666667);
    tone(tonePin, 195, 150.0);
    delay(166.666666667);
    tone(tonePin, 123, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 92, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 493, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 391, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 369, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 493, 300.0);
    delay(333.333333333);
    tone(tonePin, 293, 300.0);
    delay(333.333333333);
    tone(tonePin, 220, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 440, 300.0);
    delay(333.333333333);
    tone(tonePin, 277, 300.0);
    delay(333.333333333);
    tone(tonePin, 195, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 391, 300.0);
    delay(333.333333333);
    tone(tonePin, 246, 300.0);
    delay(333.333333333);
    tone(tonePin, 184, 300.0);
    delay(333.333333333);
    tone(tonePin, 233, 300.0);
    delay(333.333333333);
    tone(tonePin, 369, 600.0);
    delay(666.666666667);
    tone(tonePin, 123, 2400.0);
    delay(2666.66666667);

}


void loop() {

  int level = 0;
  int ningjaPosition = 1; // начальное положение персонажа
  int desk = 0;  // номер анимациии персонажа(статичный или реверсивный)
  bool results = true; // если false то игра окончена

  LCD.clear();
  delay(400);
  LCD.print("TAP TO START...");

  if(digitalRead(2) == HIGH)
  {
    delay(400);

    while(results) 
   {
    LCD.clear();
    LCD.print(level);

    // обработка нажатия кнопки
    if (digitalRead(2) == HIGH)
    {
      ningjaPosition = 0;
      desk = 1;
    } 
    if (digitalRead(2) == LOW)
    {
      ningjaPosition = 1;
      desk = 0;
    } 

    // позиция персонажа
    LCD.setCursor(personPosition, ningjaPosition);
    LCD.print(char(desk));
    

    // создание первого препятствия
    LCD.setCursor(q, rStrok1);
    LCD.print(char(3));
         
    // создание второго препятствия
    LCD.setCursor(b1, rStrok2);
    LCD.print(char(2));

      q--;
      b1--;
         
      if(q < 1) 
      {
        level++;
        tone(10, 800);
        delay(20);
        noTone(tonePin);
        q = 15;
        rStrok1 = random(0, 2);
      }
      if(b1 < 1) 
      {
        level++;
        tone(10, 800);
        delay(20);
        noTone(tonePin);
        b1 = 20;
        rStrok2 = random(0, 2);
      }
      
      // если набрано 200 очков то играет победная музыка
      if(level == 200)
      {
        LCD.clear();
        LCD.print("WINNER!!!");
        midi();
        break;
      }

      if(b1 == q)
      {
        b1 = 20;
        q = 15;
      }
         
      // проверка на столкновение с объектом
      if(personPosition - 1 == q && ningjaPosition == rStrok1) 
      {
        results = false;
        LCD.clear();
        LCD.setCursor(2,0);
        LCD.print("GAME OVER!");
        delay(100);
      }
      if(personPosition - 1 == b1 && ningjaPosition == rStrok2) 
      {
        results = false;
        LCD.clear();
        LCD.setCursor(2,0);
        LCD.print("GAME OVER!");
        delay(100);
      }
         

    delay(120);
   } // конец while

  } // конец if
  delay(400);
}
